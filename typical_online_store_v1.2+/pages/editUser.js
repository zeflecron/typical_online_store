import Head from "next/head";
import { useRouter } from "next/router";
import { motion as m } from "framer-motion";
import { useFormik } from "formik";
import * as Yup from "yup";

import { userHandler } from "./api/userHandler";
import { globalHandler } from "./api/globalHandler";

export default function EditUserPage({ user }) {
  // router
  const router = useRouter();

  // formik
  const formik = useFormik({
    initialValues: {
      username: user.username,
      email: user.email,
      country: user.country,
    },

    validationSchema: Yup.object({
      username: Yup.string()
        .min(4, "Username must be 4 characters or more")
        .max(20, "Username must be 20 characters or less")
        .required("Username is required"),
      email: Yup.string()
        .email("Invalid email address")
        .required("Email is required"),
      country: Yup.string()
        .oneOf(["Germany", "United Kingdom", "Netherlands", "Australia"])
        .required("Please select a country"),
    }),

    onSubmit: async (values) => {
      const oldUserData = await userHandler("GET", "", user.id);
      let newUserData = { ...oldUserData };

      // instead of manually updating each property one by one
      // this loops the entire values that has been added
      // checks if the old one has a property/key, then it updates with the new one
      // if not, then it just passes by and retain the old one
      for (const [key, value] of Object.entries(values)) {
        if (newUserData.hasOwnProperty(key)) {
          newUserData[key] = value;
        }
      }
      await userHandler("PUT", newUserData, user.id);

      // NOTE: IF THE WORD "LET" IS REMOVED, THERE WILL BE AN ERROR, BUT IT IS UNCAUGHT
      // needs to be fixed? or is it something that should've never occured?
      let globalValues = await globalHandler("GET");
      globalValues.loggedUserName = newUserData.username;
      await globalHandler("PUT", globalValues);
      router.push({ pathname: "/" });
    },
  });

  console.log(formik.errors);

  const handleCancel = () => {
    router.push({
      pathname: "/viewUser",
      query: { userId: user.id },
    });
  };

  const handleChangePassword = () => {
    console.log("change password");
  };

  return (
    <>
      <Head>
        <title>Typical Online Store - User - {user.username}</title>
        <meta name="online store" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <m.main
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, ease: "easeInOut" }}
        exit={{ opacity: 0 }}
        className="font-latoRegular min-h-screen"
      >
        <div className="flex items-center justify-center min-h-screen">
          <form
            onSubmit={formik.handleSubmit}
            className="bg-white flex rounded-lg font-latoRegular w-3/4 mx-auto"
          >
            <div className="flex-1 text-gray-700 p-14">
              <h1 className="text-3xl pb-2 font-latoBold tracking-wide">
                Edit Profile
              </h1>
              <div className="mt-6">
                {/* Username input field */}
                <div className="pb-4">
                  <label
                    className="block font-latoBold text-sm pb-2"
                    htmlFor="username"
                  >
                    Username
                  </label>
                  <input
                    className="border-2 border-gray-500 p-2 rounded-md w-full focus:border-emerald-500 focus:ring-emerald-500"
                    type="text"
                    name="username"
                    placeholder="Enter your username"
                    value={formik.values.username}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                  ></input>
                  <p className="block font-latoBold text-sm pt-2 text-red-500">
                    {formik.touched.username && formik.errors.username
                      ? formik.errors.username
                      : ""}
                  </p>
                </div>

                {/* Email input field */}
                <div className="pb-4">
                  <label
                    className="block font-latoBold text-sm pb-2"
                    htmlFor="email"
                  >
                    Email
                  </label>
                  <input
                    className="border-2 border-gray-500 p-2 rounded-md w-full focus:border-emerald-500 focus:ring-emerald-500"
                    type="email"
                    name="email"
                    placeholder="Enter your email"
                    value={formik.values.email}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                  ></input>
                  <p className="block font-latoBold text-sm pt-2 text-red-500">
                    {formik.touched.email && formik.errors.email
                      ? formik.errors.email
                      : ""}
                  </p>
                </div>

                {/* Country input field */}
                <div className="pb-4">
                  <label
                    className="block font-latoBold text-sm pb-2"
                    htmlFor="country"
                  >
                    Country
                  </label>
                  <select
                    name="country"
                    className="border-2 border-gray-500 p-2 rounded-md w-full focus:border-emerald-500 focus:ring-emerald-500"
                    value={formik.values.country}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                  >
                    <option>Select a country...</option>
                    <option>Germany</option>
                    <option>United Kingdom</option>
                    <option>Netherlands</option>
                    <option>Australia</option>
                  </select>
                  <p className="block font-latoBold text-sm pt-2 text-red-500">
                    {formik.touched.country && formik.errors.country
                      ? "Please select a country"
                      : ""}
                  </p>
                </div>

                <div className="flex justify-between">
                  <button
                    type="button"
                    className="flex p-4 font-latoBold bg-red-500 hover:bg-red-400 text-white text-lg border-b-4 border-red-700 hover:border-red-500 rounded"
                    onClick={handleCancel}
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    className="flex p-4 font-latoBold bg-yellow-500 hover:bg-yellow-400 text-white text-lg border-b-4 border-yellow-700 hover:border-yellow-500 rounded"
                    onClick={handleChangePassword}
                  >
                    Change password
                  </button>
                  <button
                    type="submit"
                    className="flex p-4 font-latoBold bg-teal-500 hover:bg-teal-400 text-white text-lg border-b-4 border-teal-700 hover:border-teal-500 rounded"
                  >
                    Save changes
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </m.main>
    </>
  );
}

export const getServerSideProps = async (ctx) => {
  const { query } = ctx;
  console.log(query);
  // prevents user to go to this page without the router data
  // also this if statement checks if query is empty or not
  if (Object.keys(query).length === 0 || query.userId === undefined) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  } else {
    const userData = await userHandler("GET", "None", query.userId);
    const globalValues = await globalHandler("GET");
    if (userData.id !== globalValues.loggedUserId) {
      return {
        redirect: {
          destination: "/403",
          // an alternative to permanent: false
          statusCode: 307,
        },
      };
    } else {
      return {
        props: {
          user: userData,
        },
      };
    }
  }
};
